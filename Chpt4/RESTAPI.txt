REST API와 라우팅

서버에 요청을 보낼 때는 주소를 통해 요청의 내용을 표현한다
주소가 /index.html이면 서버의 index.html을 보내달라는 뜻이고, /about.html이면 about.html을 보내달라는 뜻이다

요청이 항상 html을 요구할 필요는 없다
server5.js에서도 /login이라는 주소를 통해서 html을 요청하는 대신 세션 저장이라는 동작을 취하길 요청했다
이렇게 요청이 주소를 통해 들어오므로 서버가 이해하기 쉬운 주소를 사용하는 것이 좋다
여기서 REST API가 등장한다

REST API는 REpresentational State Transfer의 약어이다
네트워크 구조의 한 형식으로 서버의 자원을 정의하고, 자원에 대한 주소를 지정하는 방법을 가리킨다
주소는 의미를 명확하게 전달하기 위해 명사로 구성된다
/user이면 사용자 정보에 관련된 자원을 요청하는 것이도 /post라면 게시글에 관련된 자원을 요청하는 것이라고 추측할 수 있다

REST API는 주소 외에도 HTTP 요청 메서드라는 것을 사용한다
PUT, PATCH, DELETE, GET, POST 까지 총 다섯 개가 요청 메서드로 자주 사용된다

  * GET: 서버 자원을 가져오고자 할 때 사용된다. 요청의 본문에 데이터를 넣지 않는다. 데이터를 서버로 보내야 한다면 쿼리스트링을 사용한다
  * POST: 서버에 자원을 새로 등록하고자 할 때 사용된다. 요청의 본문에 새로 등록할 데이터를 넣어 보낸다
  * PUT: 서버의 자원을 요청에 들어 있는 자원으로 치환하고자 할 때 사용된다. 요쳥의 본문에 치환할 데이터를 넣어 보낸다
  * PATCH: 서버 자원의 일부만 수정하고자 할 때 사용된다. 요청의 본문에 일부 수정할 데이터를 넣어 보낸다
  * DELETE: 서버의 자원을 삭제하고자 할 때 사용된다

주소 하나가 요청 메서드를 여러 개 가질 수 있다
GET 메서드의 /user 주소로 요청을 보내면 사용자 정보를 가져오는 요청이라는 것을 알 수 있고, POST 메서드의 /user 주소로 요청을 보내면 
새로운 사용자를 등록하려 한다는 것을 알 수 있다
이렇게 주소와 메서드만 보고 요청의 내용을 명확하게 알아볼 수 있다는 것이 장점이다
또한, GET 메서드 같은 경우에는 브라우저에서 캐싱할 수도 있어서 같은 주소의 GET요청을 할 때 서버에서 가져오는 것이 아니라 캐시에서 가져올 수도 있다.
이렇게 캐싱이 되면 성능이 좋아진다

HTTP 프로토콜을 사용하면 클라이언트가 누구든 상관없이 서버와 소통할 수 있다
iOS, 안드로이드, 웹이 모두 같은 주소로 요청을 보낼 수 있다
즉, 서버와 클라이언트가 분리되어 있다는 뜻이다
이렇게 서버와 클라이언트를 분리하면 추후에 서버를 확장할 때 클라이언트에 구애되지 않아 좋아진다
