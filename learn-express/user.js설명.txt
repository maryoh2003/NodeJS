router객체는 express.Router()로 만들었다.
마지막에는 module.exports = router;로 라우터를 모듈로 만든다.
router에도 app처럼 use, get, post, put, patch, delete 같은 메서드를 붙일 수 있다.
use를 제외하고는 각각 HTTP 요청 메서드와 상응한다.

또한, app.use처럼 router 하나에 미들웨어를 여러 개 장착할 수도 있다.
실제 라우터 로직이 실행되는 미들웨어 전에 로그인 여부 또는 관리자 여부를 체크하는 미들웨어를 중간에 넣어두곤 한다.
이 말은 즉, 다음과 같은 것이 가능하다는 것이다.
router.get('/', middleware1, middleware2, middleware3);

다시 코드로 돌아가 router.get('/')이면 /주소로 GET 요청을 하는 것과 같다.
res.render 메서드로 클라이언트에 응답을 보낸다.
익스프레스가 응답 객체에 서로 추가한 메서드다.
이 메서드는 템플릿 엔진을 사용하는 부분이다

users.js에서도 router.get('/') 부분이 있다.
app.use('/users', userRouter)로 연결했기 때문에 /users 와 /이 합쳐져 /users/로 GET 요청을 했을 때 라우터의 콜백 함수가 실행된다.

사실 라우터(express.Router())를 사용할 필요 없이 app.js에서 app.get('/', 미들웨어), app.get('/users', 미들웨어)를 해도 기능은 동일하다.
하지만 코드 관리를 위해 라우터를 별도로 분리하는 것이다.

라우터에서는 반드시 요청에 대한 응답을 보내거나 에러 핸들러로 요청을 넘겨야 한다.
응답을 보내지 않으면 브라우저는 계속 응답을 기다린다. 
응답에 제한 시간이 있으므로 영원히 기다리지는 않지만, 기다리는 동안 다른 동작을 수행할 수 없을 수도 있다.
res 객체에 들어 있는 메서드들로 응답을 보낸다.

next 함수에는 라우터에서만 동작하는 특수 기능이 있다. next('route')이다.
라우터에 연결된 나머지 미들웨어들을 건너뛰고 싶을 때 사용한다.

