쿼리 알아보기

시퀄라이즈 CRUD 작업을 하려면 먼저 시퀄라이즈 쿼리에 대해 알아야 한다.
SQL문을 자바스크립트로 생성하는 것이라 시퀄라이즈만의 방식이 있다.
쿼리는 프로미스를 반환하므로 then을 붙여 결괏값을 받을 수 있다.
async/await 문법과 같이 사용할 수도 있다.


로우를 생성하는 쿼리부터 알아보겠다. 첫 줄이 SQL문이고, 그 아래는 시퀄라이즈 쿼리이다.
INSERT INTO nodejs.users (name, age, married, comment) VALUES ('zero', 24, 0, '자기소개1');
const {User} = require('../models')
User.create({
  name: 'zero',
  age: 24,
  married: false,
  comment: '자기소개1',
});

models 모듈에서 User 모델을 불러와 create 메서드를 사용하면 된다.
한 가지 주의할 점은 데이터를 넣을 때 MYSQL의 자료형이 아니라 시퀄라이즈 모델에 정의한 자료형대로 넣어야 한다는 것이다.
이것이 married가 0이 아니라 false인 이유다.
시퀄라이즈가 알아서 MySQL 자료형으로 바꿔준다. 
자료형이나 옵션에 부합하지 않는 데이터를 넣었을 때는 시퀄라이즈가 에러를 발생시킨다.

로우를 조회하는 쿼리들이다.

다음은 Users 테이블의 모든 데이터를 조회하는 SQL문이다. findAll 메서드를 사용하면 된다.
SELECT * FROM nodejs.users;
User.findAll({});

다음은 Users 테이블의 데이터 하나만 가져오는 SQL문이다. 앞으로 데이터 하나만 가져올 때는 findOne 메서드를, 여러 개 가져올 때는 findAll 메서드를 사용하면 된다.
SELECT * FROM nodejs.users LIMIT 1;
User.findOne({});

attributes 옵션을 사용해서 원하는 컬럼만 가져올 수도 있다.
SELECT name, married FROM nodejs.users;
User.findAll({
  attributes: ['name', 'married'],
});


SELECT name, age FROM nodejs.users WHERE married = 1 AND age > 30;
const { User, Sequelize: {Op}} = require('../models');
User.findAll({
  attributes: ['name', 'age'],
  where: {
    married: 1,
    age: { [Op.gt]: 30},
  },
});
- where 옵션이 조건들을 나열하는 옵션이다. 
- age 부분이 조금 특이한데, 시퀄라이즈는 자바스크립트 객체를 사용해서 쿼리를 생성해야 하므로 Op.gt 같은 특수한 연산자들이 사용된다.
- Sequelize 객체 내부의 Op 객체를 불러와 사용한다.
- { [Op.gt]: 30 }은 ES2015 문법이다.
- 자주 쓰이는 연산자료는 Op.gt(초과), Op.gte(이상), Op.lt(미만), Op.lte(이하), Op.ne(같지 않음), Op.or(또는), Op.in(배열 요소 중 하나), Op.notIn(배열 요소와 모두 다름) 등이 있다.

SELECT id, name FROM users WHERE married = 0 OR age > 30;
const { User, Sequelize: { Op }} = require('../models');
User.findAll({
  attributes: ['id', 'name'],
  where: {
    [Op.or]: [{married: 0}, {age: { [Op.get]: 30 }}],
  },
});

Op.or 속성에 OR 연산을 적용할 쿼리들을 배열로 나열하면 된다.

SELECT id, name FROM users ORDER BY age DESC;
User.findAll({
  attributes: ['id', 'name'],
  order: [['age', 'DESC']],
});
시퀄라이즈 정렬 방식이다. order 옵션으로 가능하다. 배열 안에 배열이 있다는 점에 주의해야 한다. 정렬은 꼭 컬럼 하나로 하는 게 아니라 컬럼 두 개 이상으로 할 수도 있기 때문이다.

다음은 조회할 로우 개수를 설정하는 방법이다. LIMIT 1인 경우에는 findAll 대신 findOne 메서드를 사용해도 되지만, 다음과 같이 할 수도 있다.
SELECT id, name FROM users ORDER BY age DESC LIMIT 1;
User.findAll({
  attributes: ['id', 'name'],
  order: ['age', 'DESC'],
  limit: 1,
});
limit 옵션으로 가능하다. OFFSET 역시 offset 속성으로 구현할 수 있다.

SELECT id, name FROM users ORDER BY age DESC LIMIT 1 OFFSET 1;
User.findAll({
  attributes: ['id', 'name'],
  order: ['age', 'DESC'],
  limit: 1,
  offset: 1,
});

로우를 수정하는 쿼리다.
UPDATE nodejs.users SET comment = '바꿀 내용' WHERE id = 2;
User.destroy({
  where: { id: 2 },
});
update 메서드로 수정할 수 있다. 첫 번째 인자는  수정할 내용이고, 두 번째 인자는 수정 대상 로우를 찾는 조건이다. where 옵션에 조건들을 적어준다.

DELETE FROM nodejs.users WHERE id = 2;
User.destroy({
  where: { id: 2 },
});
destroy 메서드로 삭제한다. where 옵션에 조건들을 적어준다.






